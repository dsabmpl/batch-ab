class Solution {
    char[][] board ; // instance variable
    public void solveSudoku(char[][] board) {
        this.board = board;
        // instance var = local var
        helper(0,0);
    }
    boolean uniqueInARow(int row, char digit){
        for(int i = 0; i<board.length; i++){
            if(board[row][i]==digit){
                return false; // not unique
            }
        }
        return true; // unique
    }
    boolean uniqueInCol(int col, char digit){
        for(int i = 0; i<board.length; i++){
            if(board[i][col]==digit){
                return false; // not unique
            }
        }
        return true; // unique
    }
    boolean uniqueInSubGrid(int row, int col, char digit){
        int startRow = row - row % 3;
        int startCol = col - col % 3;
        for(int i = startRow; i<startRow + 3; i++){
            for(int j = startCol; j<startCol + 3; j++){
            if(board[i][j]==digit){
                return false; // not unique
            }
        }
        }
        return true; // unique
    }
    boolean canIPlaceADigit(int row, int col , char digit){
        return uniqueInARow(row, digit) && uniqueInCol(col, digit) 
        && uniqueInSubGrid(row, col, digit);
        // check in a row
        // check in a col
        // check in a sub grid
    }
    boolean helper(int row, int col){
        // if column ends
        if(col == 9){
            row = row + 1;
            col = 0;
        }
        // if row ends (Sudoku Solved...)
        if(row == 9){
            return true; 
        }
        // if digit already exist in a cell
        if(board[row][col]!='.'){
           return  helper(row , col + 1);
        }
        for(char digit = '1'; digit<='9'; digit++){
                if(canIPlaceADigit(row, col, digit)){
                    // now place a digit
                    board[row][col] = digit;
                    boolean result = helper(row , col + 1);
                    if(result){
                        return true;
                    }
                    // if result is not true
                    // backtracking
                    board[row][col] = '.'; // undo the digit
                }
        }
        return false; 
    }
}
