class Solution {
    // Bottom Up Approach (Tabulation (Array One-D/2-D))
    public int fib(int n) {
        if(n<=1){
            return n;
        }
        int dp[] = new int[n+1];
        // fill the base case
        dp[0] = 0;
        dp[1] = 1;
         // now fill rest of the values
         for(int i = 2; i<=n; i++){
            dp[i] = dp [i-1] + dp[i-2]; // RR
         }
         return dp[n];   
        

    }
    // DP - Remember (Memoization - Top Down Approach)
    /*HashMap<Integer, Integer> map =new HashMap<>();  // cache
    public int fib(int n) {
        // base case
        if(n==0 || n==1){
            return n; 
        }
        if(map.containsKey(n)){
            return map.get(n); // return computed result
        }
        // before calculate , check in my cache
        int result = fib (n-1) + fib(n-2);
        map.put(n, result);
        return result;
    }*/
}
